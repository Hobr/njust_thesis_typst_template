@article{greenwadeComprehensiveTEXArchveNetwork1993,
	title = {The Comprehensive {TEXArchve} Network ({CTAN})},
	volume = {14},
	abstract = {T h s paper outlines the concept, development, and use of the Comprehensive {TEX} Archive Network ({CTAN})-a network-accessible archve for files related to the {TEX} family of document processing. The {CTAN} is a coordinated effort among consenting well-known archve sites which provides quick identification and retrieval files in a consistent manner from hosts on different continents, thereby reducing overall network load and increasing speed of retrieval. Moreover, it provides users with a parallel archive structure between hosts with holdings whch are generally synchronized to w i t h 30 hours of one another. This is achieved by routinely mirroring one another's holdings, as well as mirroring other archves to maintain an up-to-date collection of files.},
	number = {3},
	author = {Greenwade, George D},
	date = {1993},
	langid = {english},
	file = {Greenwade - 1993 - The Comprehensive TEXArchve Network (CTAN).pdf:/home/kanade/Zotero/storage/BHGA65BY/Greenwade - 1993 - The Comprehensive TEXArchve Network (CTAN).pdf:application/pdf},
}

@article{dolstraNixSafePolicyFree2004,
	title = {Nix: A Safe and Policy-Free System for Software Deployment},
	abstract = {Existing systems for software deployment are neither safe nor sufficiently flexible. Primary safety issues are the inability to enforce reliable specification of component dependencies, and the lack of support for multiple versions or variants of a component. This renders deployment operations such as upgrading or deleting components dangerous and unpredictable. A deployment system must also be flexible (i.e., policy-free) enough to support both centralised and local package management, and to allow a variety of mechanisms for transferring components. In this paper we present Nix, a deployment system that addresses these issues through a simple technique of using cryptographic hashes to compute unique paths for component instances.},
	author = {Dolstra, Eelco and de Jonge, Merijn and Visser, Eelco},
	date = {2004},
	langid = {english},
	file = {Dolstra 等 - 2004 - Nix A Safe and Policy-Free System for Software De.pdf:/home/kanade/Zotero/storage/PE5FGJKN/Dolstra 等 - 2004 - Nix A Safe and Policy-Free System for Software De.pdf:application/pdf},
}

@inproceedings{dolstraNixOSPurelyFunctional2008,
	location = {New York, {NY}, {USA}},
	title = {{NixOS}: a purely functional Linux distribution},
	isbn = {978-1-59593-919-7},
	url = {https://dl.acm.org/doi/10.1145/1411204.1411255},
	doi = {10.1145/1411204.1411255},
	series = {{ICFP} '08},
	shorttitle = {{NixOS}},
	abstract = {Existing package and system configuration management tools suffer from an imperative model, where system administration actions such as upgrading packages or changes to system configuration files are stateful: they destructively update the state of the system. This leads to many problems, such as the inability to roll back changes easily, to run multiple versions of a package side-by-side, to reproduce a configuration deterministically on another machine, or to reliably upgrade a system. In this paper we show that we can overcome these problems by moving to a purely functional system configuration model. This means that all static parts of a system (such as software packages, configuration files and system startup scripts) are built by pure functions and are immutable, stored in a way analogously to a heap in a purely function language. We have implemented this model in {NixOS}, a non-trivial Linux distribution that uses the Nix package manager to build the entire system configuration from a purely functional specification.},
	pages = {367--378},
	booktitle = {Proceedings of the 13th {ACM} {SIGPLAN} international conference on Functional programming},
	publisher = {Association for Computing Machinery},
	author = {Dolstra, Eelco and Löh, Andres},
	urldate = {2024-05-14},
	date = {2008-09-20},
	keywords = {nix, {NixOS}, package management, purely functional deployment model, purely functional language, software deployment, system configuration management},
	file = {Full Text PDF:/home/kanade/Zotero/storage/5KXT6AAX/Dolstra 和 Löh - 2008 - NixOS a purely functional Linux distribution.pdf:application/pdf},
}

@inproceedings{capposLookMirrorAttacks2008,
	location = {New York, {NY}, {USA}},
	title = {A look in the mirror: attacks on package managers},
	isbn = {978-1-59593-810-7},
	url = {https://dl.acm.org/doi/10.1145/1455770.1455841},
	doi = {10.1145/1455770.1455841},
	series = {{CCS} '08},
	shorttitle = {A look in the mirror},
	abstract = {This work studies the security of ten popular package managers. These package managers use different security mechanisms that provide varying levels of usability and resilience to attack. We find that, despite their existing security mechanisms, all of these package managers have vulnerabilities that can be exploited by a man-in-the-middle or a malicious mirror. While all current package managers suffer from vulnerabilities, their security is also positively or negatively impacted by the distribution's security practices. Weaknesses in package managers are more easily exploited when distributions use third-party mirrors as official mirrors. We were successful in using false credentials to obtain an official mirror on all five of the distributions we attempted. We also found that some security mechanisms that control where a client obtains metadata and packages from may actually decrease security. We analyze current package managers to show that by exploiting vulnerabilities, an attacker with a mirror can compromise or crash hundreds to thousands of clients weekly. The problems we disclose are now being corrected by many different package manager maintainers.},
	pages = {565--574},
	booktitle = {Proceedings of the 15th {ACM} conference on Computer and communications security},
	publisher = {Association for Computing Machinery},
	author = {Cappos, Justin and Samuel, Justin and Baker, Scott and Hartman, John H.},
	urldate = {2024-05-14},
	date = {2008-10-27},
	keywords = {mirrors, package management, replay attack},
	file = {Full Text PDF:/home/kanade/Zotero/storage/WI8IGEBK/Cappos 等 - 2008 - A look in the mirror attacks on package managers.pdf:application/pdf},
}

@inproceedings{mancinelliManagingComplexityLarge2006,
	location = {Tokyo},
	title = {Managing the Complexity of Large Free and Open Source Package-Based Software Distributions},
	isbn = {978-0-7695-2579-2},
	url = {https://ieeexplore.ieee.org/document/4019575/},
	doi = {10.1109/ASE.2006.49},
	abstract = {The widespread adoption of Free and Open Source Software ({FOSS}) in many strategic contexts of the information technology society has drawn the attention on the issues regarding how to handle the complexity of assembling and managing a huge number of (packaged) components in a consistent and effective way. {FOSS} distributions (and in particular {GNU}/Linux-based ones) have always provided tools for managing the tasks of installing, removing and upgrading the (packaged) components they were made of. While these tools provide a (not always effective) way to handle these tasks on the client side, there is still a lack of tools that could help the distribution editors to maintain, on the server side, large and high-quality distributions. In this paper we present our research whose main goal is to ﬁll this gap: we show our approach, the tools we have developed and their application with experimental results. Our contribution provides an effective and automatic way to support distribution editors in handling those issues that were, until now, mostly addressed using ad-hoc tools and manual techniques.},
	eventtitle = {Proceedings. 21st {IEEE} International Conference on Automated Software Engineering},
	pages = {199--208},
	booktitle = {21st {IEEE}/{ACM} International Conference on Automated Software Engineering ({ASE}'06)},
	publisher = {{IEEE}},
	author = {Mancinelli, Fabio and Boender, Jaap and Di Cosmo, Roberto and Vouillon, Jerome and Durak, Berke and Leroy, Xavier and Treinen, Ralf},
	urldate = {2024-05-14},
	date = {2006-09},
	langid = {english},
	file = {Mancinelli 等 - 2006 - Managing the Complexity of Large Free and Open Sou.pdf:/home/kanade/Zotero/storage/Y8Z864LN/Mancinelli 等 - 2006 - Managing the Complexity of Large Free and Open Sou.pdf:application/pdf},
}

@inproceedings{dicosmoPackageUpgradesFOSS2008,
	title = {Package upgrades in {FOSS} distributions: details and challenges},
	url = {http://arxiv.org/abs/0902.1610},
	doi = {10.1145/1490283.1490292},
	shorttitle = {Package upgrades in {FOSS} distributions},
	abstract = {The upgrade problems faced by Free and Open Source Software distributions have characteristics not easily found elsewhere. We describe the structure of packages and their role in the upgrade process. We show that state of the art package managers have shortcomings inhibiting their ability to cope with frequent upgrade failures. We survey current countermeasures to such failures, argue that they are not satisfactory, and sketch alternative solutions.},
	pages = {1--5},
	booktitle = {Proceedings of the 1st International Workshop on Hot Topics in Software Upgrades},
	author = {Di Cosmo, Roberto and Zacchiroli, Stefano and Trezentos, Paulo},
	urldate = {2024-05-14},
	date = {2008-10-20},
	eprinttype = {arxiv},
	eprint = {0902.1610 [cs]},
	keywords = {Computer Science - Operating Systems, Computer Science - Software Engineering, distribution, {FOSS}, packages, rollback, upgrade},
	file = {全文:/home/kanade/Zotero/storage/35RLYQ2P/Di Cosmo 等 - 2008 - Package upgrades in FOSS distributions details an.pdf:application/pdf;arXiv.org Snapshot:/home/kanade/Zotero/storage/BSLURWTN/0902.html:text/html},
}

@inproceedings{ignatievEfficientOptimizationPackage2014,
	location = {New York, {NY}, {USA}},
	title = {Towards efficient optimization in package management systems},
	isbn = {978-1-4503-2756-5},
	url = {https://dl.acm.org/doi/10.1145/2568225.2568306},
	doi = {10.1145/2568225.2568306},
	series = {{ICSE} 2014},
	abstract = {Package management as a means of reuse of software artifacts has become extremely popular, most notably in Linux distributions. At the same time, successful package management brings about a number of computational challenges. Whenever a user requires a new package to be installed, a package manager not only installs the new package but it might also install other packages or uninstall some old ones in order to respect dependencies and conflicts of the packages. Coming up with a new configuration of packages is computationally challenging. It is in particular complex when we also wish to optimize for user preferences, such as that the resulting package configuration should not differ too much from the original one. A number of exact approaches for solving this problem have been proposed in recent years. These approaches, however, do not have guaranteed runtime due to the high computational complexity of the problem. This paper addresses this issue by devising a hybrid approach that integrates exact solving with approximate solving by invoking the approximate part whenever the solver is running out of time. Experimental evaluation shows that this approach enables returning high-quality package configurations with rapid response time.},
	pages = {745--755},
	booktitle = {Proceedings of the 36th International Conference on Software Engineering},
	publisher = {Association for Computing Machinery},
	author = {Ignatiev, Alexey and Janota, Mikoláš and Marques-Silva, Joao},
	urldate = {2024-05-14},
	date = {2014-05-31},
	keywords = {{MaxSAT} solving, Minimal Correstion Subsets, Optimization, Package management, {SAT} solving},
	file = {Full Text PDF:/home/kanade/Zotero/storage/89UVLM98/Ignatiev 等 - 2014 - Towards efficient optimization in package manageme.pdf:application/pdf},
}

@inproceedings{kikasStructureEvolutionPackage2017,
	title = {Structure and Evolution of Package Dependency Networks},
	url = {https://ieeexplore.ieee.org/document/7962360},
	doi = {10.1109/MSR.2017.55},
	abstract = {Software developers often include available open-source software packages into their projects to minimize redundant effort. However, adding a package to a project can also introduce risks, which can propagate through multiple levels of dependencies. Currently, not much is known about the structure of open-source package ecosystems of popular programming languages and the extent to which transitive bug propagation is possible. This paper analyzes the dependency network structure and evolution of the {JavaScript}, Ruby, and Rust ecosystems. The reported results reveal significant differences across language ecosystems. The results indicate that the number of transitive dependencies for {JavaScript} has grown 60\% over the last year, suggesting that developers should look more carefully into their dependencies to understand what exactly is included. The study also reveals that vulnerability to a removal of the most popular package is increasing, yet most other packages have a decreasing impact on vulnerability. The findings of this study can inform the development of dependency management tools.},
	eventtitle = {2017 {IEEE}/{ACM} 14th International Conference on Mining Software Repositories ({MSR})},
	pages = {102--112},
	booktitle = {2017 {IEEE}/{ACM} 14th International Conference on Mining Software Repositories ({MSR})},
	author = {Kikas, Riivo and Gousios, Georgios and Dumas, Marlon and Pfahl, Dietmar},
	urldate = {2024-05-14},
	date = {2017-05},
	keywords = {Computer bugs, Computer languages, dependency management, Ecosystems, Libraries, mining software repositories, software ecosystems, software evolution, Software packages, Tools},
	file = {IEEE Xplore Abstract Record:/home/kanade/Zotero/storage/5E2M7KN2/7962360.html:text/html;IEEE Xplore Full Text PDF:/home/kanade/Zotero/storage/6YS45TFX/Kikas 等 - 2017 - Structure and Evolution of Package Dependency Netw.pdf:application/pdf},
}

@inproceedings{arthoWhySoftwarePackages2012,
	title = {Why Do Software Packages Conflict?},
	url = {https://urn.kb.se/resolve?urn=urn:nbn:se:kth:diva-199130},
	abstract = {Why Do Software Packages Conflict?},
	eventtitle = {9th Working Conf. on Mining Software Repositories ({MSR} 2012)},
	pages = {141--150},
	author = {Artho, Cyrille and Suzaki, Kuniyasu and Cosmo, Roberto di and Treinen, Ralf and Zacchiroli, Stefano},
	urldate = {2024-05-14},
	date = {2012},
	file = {Full Text PDF:/home/kanade/Zotero/storage/SELVYTG3/Artho 等 - 2012 - Why Do Software Packages Conflict.pdf:application/pdf},
}

@inproceedings{androulakiHyperledgerFabricDistributed2018,
	location = {New York, {NY}, {USA}},
	title = {Hyperledger fabric: a distributed operating system for permissioned blockchains},
	isbn = {978-1-4503-5584-1},
	url = {https://dl.acm.org/doi/10.1145/3190508.3190538},
	doi = {10.1145/3190508.3190538},
	series = {{EuroSys} '18},
	shorttitle = {Hyperledger fabric},
	abstract = {Fabric is a modular and extensible open-source system for deploying and operating permissioned blockchains and one of the Hyperledger projects hosted by the Linux Foundation (www.hyperledger.org). Fabric is the first truly extensible blockchain system for running distributed applications. It supports modular consensus protocols, which allows the system to be tailored to particular use cases and trust models. Fabric is also the first blockchain system that runs distributed applications written in standard, general-purpose programming languages, without systemic dependency on a native cryptocurrency. This stands in sharp contrast to existing block-chain platforms that require "smart-contracts" to be written in domain-specific languages or rely on a cryptocurrency. Fabric realizes the permissioned model using a portable notion of membership, which may be integrated with industry-standard identity management. To support such flexibility, Fabric introduces an entirely novel blockchain design and revamps the way blockchains cope with non-determinism, resource exhaustion, and performance attacks. This paper describes Fabric, its architecture, the rationale behind various design decisions, its most prominent implementation aspects, as well as its distributed application programming model. We further evaluate Fabric by implementing and benchmarking a Bitcoin-inspired digital currency. We show that Fabric achieves end-to-end throughput of more than 3500 transactions per second in certain popular deployment configurations, with sub-second latency, scaling well to over 100 peers.},
	pages = {1--15},
	booktitle = {Proceedings of the Thirteenth {EuroSys} Conference},
	publisher = {Association for Computing Machinery},
	author = {Androulaki, Elli and Barger, Artem and Bortnikov, Vita and Cachin, Christian and Christidis, Konstantinos and De Caro, Angelo and Enyeart, David and Ferris, Christopher and Laventman, Gennady and Manevich, Yacov and Muralidharan, Srinivasan and Murthy, Chet and Nguyen, Binh and Sethi, Manish and Singh, Gari and Smith, Keith and Sorniotti, Alessandro and Stathakopoulou, Chrysoula and Vukolić, Marko and Cocco, Sharon Weed and Yellick, Jason},
	urldate = {2024-05-14},
	date = {2018-04-23},
	file = {Full Text PDF:/home/kanade/Zotero/storage/79L693DL/Androulaki 等 - 2018 - Hyperledger fabric a distributed operating system.pdf:application/pdf},
}

@inproceedings{hegdePackageManagementSystem2021,
	title = {Package Management System in Linux},
	url = {https://ieeexplore.ieee.org/document/9544805},
	doi = {10.1109/ASIANCON51346.2021.9544805},
	abstract = {In the Linux environment, there are two common methods for delivering software: source code and pre-compiled binaries. Open-source software can benefit from source-code availability. Close-source software, on the other hand, requires a pre-compiled binary. Unlike Windows, Linux distributions such as Ubuntu, Red Hat, {CentOS}, and Debian come in a variety of flavours. Various Linux distributions necessitate the use of distinct binary installation packages. Red Hat and {CentOS}, for example, use. rpm packages, but Ubuntu and Debian require. deb packages. Developers must compile software on as many Linux computers as their supported Linux versions in order to create a software package appropriate for a wide range of Linux distributions. This procedure is inefficient, time-consuming, and difficult to manage. A method for creating and managing software packages is created here, that only requires one Linux machine. This system automates the export of software source code from a version control system, the editing of package configuration, the building of software packages, and the management of software versions. The packages for {CPU} performance libraries are built using this approach, which has been tested and utilised on a large scale. It has been found to speed up software release, usage and reduce the efforts and complexities. It's also simple to use, especially for those who aren't familiar with Linux.},
	eventtitle = {2021 Asian Conference on Innovation in Technology ({ASIANCON})},
	pages = {1--6},
	booktitle = {2021 Asian Conference on Innovation in Technology ({ASIANCON})},
	author = {Hegde, Shrinidhi G and Ranjani, G},
	urldate = {2024-05-14},
	date = {2021-08},
	keywords = {Codes, Computers, Control systems, Debian, Linux, Package management system, {RPM}, Software, Software packages, Spack, Technological innovation},
	file = {IEEE Xplore Abstract Record:/home/kanade/Zotero/storage/DIDN6IJZ/9544805.html:text/html;IEEE Xplore Full Text PDF:/home/kanade/Zotero/storage/KQWXZZES/Hegde 和 Ranjani - 2021 - Package Management System in Linux.pdf:application/pdf},
}

@inproceedings{mongkolluksameManagementSystemSoftware2012,
	title = {A management system for software package distribution},
	url = {https://ieeexplore.ieee.org/document/6304372/references#references},
	abstract = {There are two popular ways to distribute software in Linux world, by distributing source code or pre-compiled binary. Source-code distribution is suitable for open-source software. However, for close-source software pre-compiled binary is the only option. Unlike Windows, there are many versions of Linux distributions, such as Ubuntu, Red Hat, {CentOS}, and Debian. Different Linux distributions require different binary installation package. For example, Red Hat and {CentOS} use .rpm package while Ubuntu and Debian need .deb package. To generate a software package suitable for many Linux distributions, developers must compile software on as many Linux machines as their supported Linux versions. This process is cumbersome, inefficient and difficult to manage. We develop a system to generate and manage software packages, which requires only one Linux machine. This system automatically exports software source code from a version control system, edits package configuration, builds software package, and manages software version. This system is tested and used on a production scale to build our network management software named {NetHAM}. It is shown to expedite the software release process and reduce number of computers required. In addition, it is easy to use even by someone with no Linux skill.},
	eventtitle = {2012 Proceedings of {PICMET} '12: Technology Management for Emerging Technologies},
	pages = {3529--3536},
	booktitle = {2012 Proceedings of {PICMET} '12: Technology Management for Emerging Technologies},
	author = {Mongkolluksame, Sophon and Issariyapat, Chavee and Pongpaibool, Panita and Meesublak, Koonlachat and Nulong, Nontaluck and Pukkawanna, Sirikarn},
	urldate = {2024-05-14},
	date = {2012-07},
	note = {{ISSN}: 2159-5100},
	keywords = {Buildings, Computer architecture, Linux, Operating systems, Servers, Software packages},
	file = {IEEE Xplore Abstract Record:/home/kanade/Zotero/storage/7I4LRFBV/references.html:text/html;IEEE Xplore Full Text PDF:/home/kanade/Zotero/storage/ACH3ZZ5Z/Mongkolluksame 等 - 2012 - A management system for software package distribut.pdf:application/pdf},
}
